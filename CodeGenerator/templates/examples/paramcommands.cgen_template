//< This template demonstrates the use of parameter commands
//< run the program and check the output in examples/paramcommands
#include <stdio.h>

//< First example: initialising all parameters to default value
void initialize() {
	//< p-line : note how often this line is included!
	//< once for each specified parameter!
	$p-line$ [all] p#name = p#defaultValue;
}

//< Second example: reset only the 2 specified parameters
void reset_sensors() {
	$p-line$ [sensor_1|sensor_2] p#name = p#defaultValue;
}

//< Third example: use p-block for multiple lines!
void print_parameter() {
	//< additionally, lets throw in a variable!
	$var$ \{printfunction\} printf
	//< p-block: includes the block once for each parameter!
	$p-block$ [testing_2|testing_4] \{
		// This is easier than typing lots of p-lines!
		printfunction("%u", p#name);
	\}
}

//< final example: use p-template for very large sections
//< or use it to organise smaller sections
void set_parameter() {
	//< we could use the same template for each parameter with :
	//< $p-template$ [all] sometemplate.cgen_template
	//< but we can also use a parameter variables here!
	$p-template$ [all] p#name/set_parameter.cgen_template
	//< note the different template files used for each
	//< and what happens if the file was missing or empty?
	//< (check the logfile / command line output!)
}